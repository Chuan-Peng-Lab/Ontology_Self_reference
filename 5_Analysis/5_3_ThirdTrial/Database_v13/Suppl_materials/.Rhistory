install.packages('brms')
install.packages('mvtnorm')
install.packages('brms')
library(brms)
install.packages('cmdstanr')
library(cmdstanr)
cmdstanr::cmdstan_path()
library(posterior)
library(bayesplot)
file <- file.path(cmdstan_path(), "example", "bernoulli", "bernoulli.stan")
mod <- cmdstan_model(file)
file <- file.path(cmdstan_path(), "examples", "bernoulli", "bernoulli.stan")
mod <- cmdstan_model(file)
model$print()
mod$print()
mod$exe_file()
data_list <- list(N = 10, y = c(0, 1, 0, 0, 0, 0, 0, 0, 0, 1))
fit <- mod$sample(data = data_list, seed = 123, chains = 4, parallel_chains = 4, refresh = 500)
fit$summary()
draws_array <- fit$draws
str(draws_array)
draws_array() <- fit$draws
draws_arr <- fit$draws
str(draws_arr)
draws_arr <- fit$draws()
str(draws_arr)
draws_df <- as_draws_df(draws_arr)
mcmc_hist(fit$draws('theta'))
diagnostics_df <- as_draws_df(fit$sampler_diagnostics())
print(diagnostics_df)
0.5^10
a <- rnorm(1000)
plot(a)
plot(cars)
plot(cars)
print("hello world")
a <- rnorm(100)
hist(a)
plot(cars)
plot(cars)
for (ii in seq(10)){
print(ii)
}
for (ii in seq(10)){
print(ii)
}
for (ii in seq(10)){
print(ii)
}
}
for (ii in seq(10)){
print(ii)
}
for (ii in seq(10)){
print(ii)
}
plot(cars)
i <- 5
if (i > 3) {
print("Yes")
} else {
print("NO")
}
ggplot(dat, aes(x = Sepal.Length,
y = Petal.Lenth,
colour = Species)) +
geom_point() +
scale_color_hue()
library(tidyverse)
dat <- iris
ggplot(dat, aes(x = Sepal.Length,
y = Petal.Lenth,
colour = Species)) +
geom_point() +
scale_color_hue()
head(dat)
ggplot(dat, aes(x = Sepal.Length,
y = Petal.Length,
colour = Species)) +
geom_point() +
scale_color_hue()
ggplot(dat, aes(x = Sepal.Length,
y = Petal.Length,
colour = Species)) +
geom_point()
ggplot(dat, aes(x = Sepal.Length,
y = Petal.Length,
colour = Species)) +
geom_point()
ggplot(dat, aes(x = Sepal.Length,
y = Petal.Length,
colour = Species)) +
geom_point()
ggplot2::gpplot(dat, aes(x = Sepal.Length)) +
geom_histogram() +
facet_grid(~ Species)
ggplot2::ggplot(dat, aes(x = Sepal.Length)) +
geom_histogram() +
facet_grid(~ Species)
ggplot2::ggplot(dat, aes(x = Sepal.Length,
color = Species,
fill = Species)) +
geom_density(alpha = 0.2,
size = 0.7) +
theme_bw()
ggplot2::ggplot(dat, aes(x = Sepal.Length,
color = Species)) +
geom_density(alpha = 0.2,
size = 0.7) +
theme_bw()
ggplot2::ggplot(dat, aes(x = Sepal.Length,
color = Species,
fill = Species)) +
geom_density(
size = 0.7) +
theme_bw()
ggplot2::ggplot(dat, aes(x = Sepal.Length,
color = Species,
fill = Species)) +
geom_density(alpha = 0.2) +
theme_bw()
ggplot2::ggplot(dat, aes(x = Sepal.Length,
color = Species,
fill = Species)) +
geom_density(alpha = 0.2,,
size = 0.7) +
theme_bw()
ggplot2::ggplot(dat, aes(x = Sepal.Length,
color = Species,
fill = Species)) +
geom_density(alpha = 0.2,
size = 2) +
theme_bw()
?check_mod
?check_model
??check_model
?report
??report
?bruceR::TTEST
library(tidyverse)
?easystats::easystats_update
?tidyr::pivot_wider
?dplyr::combine
?bruceR::MANOVA
?anova
47+32+40+49+17+41+57+49
62.64 + 133.36 + 40.19 + 49.35+77.52+45.6
62.64 + 133.36 + 40.19 + 49.35+77.52+45.6 + 283
691.66 + 233.38 + 68.98
41.7 + 53.6 + 36.25 + 102.66 + 36.9
271.11 + 994.02 + 1200 + 489
994.17 + 332
12500 + 332 + 2954.13 -1200
125000 + 53.6+36.25+102.66+36.9+41.7+489+68.98+233.38+283.15+45.6+77.52+49.35+40.19+133.36+62.64
125000 + 53.6+36.25+102.66+36.9+41.7+489+68.98+233.38+283.15+45.6+77.52+49.35+40.19+133.36+62.64 + 49+57+41+17+49+40+32+47
125000 + 53.6+36.25+102.66+36.9+41.7+489+68.98+233.38+283.15+45.6+77.52+49.35+40.19+133.36+62.64 + 49+57+41+17+49+40+32+47 - 14586.28
12500 + 53.6+36.25+102.66+36.9+41.7+489+68.98+233.38+283.15+45.6+77.52+49.35+40.19+133.36+62.64 + 49+57+41+17+49+40+32+47
206332.47 + 10292.56 + 27902.97
2267.53 + 345.63
206332.47 + 10292.56 + 27902.97 + 70052.2
400000 + 700000 + 38 000 + 244528
400000 + 700000 + 38000 + 244528
setwd("/Users/hcp4715/Downloads/Database_v11/Suppl_materials")
library(tidyverse)
results <- read.csv("Interrater_reliability_Raw.csv")
ratings <- dplyr::select(results, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R30, R31, R32, R33, R34, R35, R36, R37, R38, R39, R40, R41, R42, R43, R44, R45, R46, R47, R48, R49, R50, R51, R52, R53, R54, R55, R56, R57, R58, R59, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76)
ratings2 <- ratings %>% filter(row_number()>6)
View(ratings2)
rater1 <- ratings2[,seq(1,ncol(ratings2),2)]
rater2 <- ratings2[,seq(0,ncol(ratings2),2)]
View(rater1)
# install.packages("xml2")
library(xml2)
raterlist1 <- as.data.frame(rater1)
raterlist2 <- as.data.frame(rater2)
View(raterlist1)
raterlisted1 <- c(raterlist1[,1])
for(i in 2:38){
raterlisted1 <- c(raterlisted1,raterlist1[,i])
}
raterlisted2 <- c(raterlist2[,1])
for(i in 2:38){
raterlisted2 <- c(raterlisted2,raterlist2[,i])
}
r1=as.numeric (raterlisted1)
r2=as.numeric(raterlisted2)
r1 <- as.numeric (raterlisted1)
r2 <- as.numeric(raterlisted2)
dat = tibble(
rater1 = r1,
rater2 = r2
)
View(dat)
#install.packages("irrCAC")
library(irrCAC)
gwet.ac1.raw(dat, weights = "unweighted", categ.labels = NULL, conflev = 0.95, N = Inf)
?gwet.ac1.raw
gwet.ac1.raw(dat)
gwet.ac1.raw(dat)$est$coeff.val
gwet.ac1.raw(dat)$est
dat <- tibble(
rater1 = r1,
rater2 = r2
) %>%
dplyr::filter(!is.na(rater1) & !is.na(rater2))
gwet.ac1.raw(dat)
library(tidyverse)
#install.packages("easyalluvial")
#install.packages("parcats")
library(parcats)
library(easyalluvial)
dat1 <- read.csv("Figure4_data.csv") %>%
dplyr::mutate_if(is.character,as.factor) %>%
dplyr::select(-c(Freq, First_Author,Article_ID, Participant, Task,Control_conditions)) %>%
dplyr::mutate(Contrast = factor(Contrast,
levels = c("close", "celebrity", "stranger", "NP", "multi")))%>%
dplyr::rename(`Task: Phase 1` =  Phase_1,
`Task: Phase 2` =  Phase_2,
`Control_conditions`= Contrast)
# using the first column to color the flow
p_selfref <- dat1 %>%
easyalluvial::alluvial_wide(.,
fill_by = "last_variable",
#col_vector_flow = 'grey',
#col_vector_value = palette_filter( greys = F),
stratum_label_size = 1,
stratum_width = 1/3,
# col_vector_value = RColorBrewer::brewer.pal(9, "Paired")[c(4, 7, 5, 8, 6)],
colorful_fill_variable_stratum = T)
# using the first column to color the flow
p_selfref <- dat1 %>%
easyalluvial::alluvial_wide(.,
fill_by = "last_variable",
#col_vector_flow = 'grey',
#col_vector_value = palette_filter( greys = F),
stratum_label_size = 1,
stratum_width = 1/3,
# col_vector_value = RColorBrewer::brewer.pal(9, "Paired")[c(4, 7, 5, 8, 6)],
colorful_fill_variable_stratum = T)
parcats::parcats(p_selfref, marginal_histograms = FALSE, imp = TRUE, data_input = dat1, arrangement = 'freeform',
labelfont = list(size = 18, color = "black", family = "Times New Roman"),
offset_imp = 1)
parcats::parcats(p_selfref, marginal_histograms = FALSE, imp = TRUE, data_input = dat1, arrangement = 'freeform',
labelfont = list(size = 18, color = "black", family = "Times New Roman"),
offset_imp = 1)
sessionInfo()
